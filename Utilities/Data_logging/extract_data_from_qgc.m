function extract_data_from_qgc(filename)
% DATA_EXTRACT Extract data from QGroundControl's log files
%   @param (required) filename : The log file's name (.txt format)
%
%   @author : MAV'RIC Team
%   @author : Dylan Bourgeois
%
% Please follow the 2 steps to use this script accordingly.
%   1/2 : Declare your device's ID. This identifier is 
%         usually 'Mxx' where 'xx' is your MAVLINK_SYS_ID
%
%   2/2 : Define which variables you would like to plot. To do so you can
%         use one of the built-in functions (or implement your own) or use
%         the generic 'plot_params(varargin)' function. For details see
%         the function definition

% ****************************** Step 1/2 ****************************** %
% Declare device ID to tag the logged parameters
id = 'M21';
% ****************************** Step 1/2 ****************************** %

% Read logfile
hFile = fopen(filename, 'rt');
try text = textscan(hFile,'%s');
catch err
    error('Couldn''t open file : %s please check the specified path.', filename)
end

% Clean up 'NaN' from log file
numCols = getNumCols(filename);
lastNaNIndex = findLastNaNIndex(text, numCols);

% Read data starting after the last NaN's index
try data = dlmread(filename,'\t',lastNaNIndex,0);
catch err
    error('Couldn''t read data from the file. Please check the log format.')
end

% Count the number of logged variables
numLoggedVars = rows(data);
loggedVars = text{1:1}(1:numLoggedVars);


% Please note : If you wish to add a variable to the loggableVars, make 
% sure the name you use matches the name that appears in the file ! This 
% name usually goes by the format 'Mxxyy' where 'xx' is your MAVLINK_SYS_ID 
% (which is set by the tag function) and 'yy' is the name of the variable.

% Indices -- Store all the base indices in map
loggableVars = {                       ...                                
                'TIMESTAMPms',         ...                                 
                tag('ATTITUDEpitch'),     ...
                tag('ATTITUDEpitchspeed'),     ...
                tag('ATTITUDEroll'),     ...
                tag('ATTITUDErollspeed'), ...
                tag('ATTITUDEtimebootms'), ...
                tag('ATTITUDEyaw'), ...
                tag('ATTITUDEyawspeed'), ...
                tag('ATTITUDEQUATERNIONpitchspeed'), ...
                tag('ATTITUDEQUATERNIONq1'), ...
                tag('ATTITUDEQUATERNIONq2'), ...
                tag('ATTITUDEQUATERNIONq3'), ...
                tag('ATTITUDEQUATERNIONq4'), ...
                tag('ATTITUDEQUATERNIONrollspeed'), ...
                tag('ATTITUDEQUATERNIONtimebootms'), ...
                tag('ATTITUDEQUATERNIONyawspeed'), ...
                tag('DISTANCESENSORcovariance'), ...
                tag('DISTANCESENSORcurrentdistance'), ...
                tag('DISTANCESENSORid'), ...
                tag('DISTANCESENSORmaxdistance'), ...
                tag('DISTANCESENSORmindistance'), ...
                tag('DISTANCESENSORorientation'), ...
                tag('DISTANCESENSORtimebootms'), ...
                tag('DISTANCESENSORtype'), ...
                tag('GLOBALPOSITIONINTalt'), ...
                tag('GLOBALPOSITIONINThdg'), ...
                tag('GLOBALPOSITIONINTlat'), ...
                tag('GLOBALPOSITIONINTlon'), ...
                tag('GLOBALPOSITIONINTrelativealt'), ...
                tag('GLOBALPOSITIONINTtimebootms'), ...
                tag('GLOBALPOSITIONINTvx'), ...
                tag('GLOBALPOSITIONINTvy'), ...
                tag('GLOBALPOSITIONINTvz'), ...
                tag('GPSRAWINTalt'), ...
                tag('GPSRAWINTcog'), ...
                tag('GPSRAWINTeph'), ...
                tag('GPSRAWINTepv'), ...
                tag('GPSRAWINTfixtype'), ...
                tag('GPSRAWINTlat'), ...
                tag('GPSRAWINTlon'), ...
                tag('GPSRAWINTsatellitesvisible'), ...
                tag('GPSRAWINTtimeusec'), ...
                tag('GPSRAWINTvel'), ...
                tag('HEARTBEATautopilot'), ...
                tag('HEARTBEATbasemode'), ...
                tag('HEARTBEATcustommode'), ...
                tag('HEARTBEATmavlinkversion'), ...
                tag('HEARTBEATsystemstatus'), ...
                tag('HEARTBEATtype'), ...
                tag('HILSTATEalt'), ...
                tag('HILSTATElat'), ...
                tag('HILSTATElon'), ...
                tag('HILSTATEpitch'), ...
                tag('HILSTATEpitchspeed'), ...
                tag('HILSTATEroll'), ...
                tag('HILSTATErollspeed'), ...
                tag('HILSTATEtimeusec'), ...
                tag('HILSTATEvx'), ...
                tag('HILSTATEvy'), ...
                tag('HILSTATEvz'), ...
                tag('HILSTATExacc'), ...
                tag('HILSTATEyacc'), ...
                tag('HILSTATEyaw'), ...
                tag('HILSTATEyawspeed'), ...
                tag('HILSTATEzacc'), ...
                tag('LOCALPOSITIONNEDtimebootms'), ...
                tag('LOCALPOSITIONNEDvx'), ...
                tag('LOCALPOSITIONNEDvy'), ...
                tag('LOCALPOSITIONNEDvz'), ...
                tag('LOCALPOSITIONNEDx'), ...
                tag('LOCALPOSITIONNEDy'), ...
                tag('LOCALPOSITIONNEDz'), ...
                tag('RAWIMUtimeusec'), ...
                tag('RAWIMUxacc'), ...
                tag('RAWIMUxgyro'), ...
                tag('RAWIMUxmag'), ...
                tag('RAWIMUyacc'), ...
                tag('RAWIMUygyro'), ...
                tag('RAWIMUymag'), ...
                tag('RAWIMUzacc'), ...
                tag('RAWIMUzgyro'), ...
                tag('RAWIMUzmag'), ...
                tag('SCALEDIMUtimebootms'), ...
                tag('SCALEDIMUxacc'), ...
                tag('SCALEDIMUxgyro'), ...
                tag('SCALEDIMUxmag'), ...
                tag('SCALEDIMUyacc'), ...
                tag('SCALEDIMUygyro'), ...
                tag('SCALEDIMUymag'), ...
                tag('SCALEDIMUzacc'), ...
                tag('SCALEDIMUzgyro'), ...
                tag('SCALEDIMUzmag'), ...
                tag('SCALEDPRESSUREpressabs'), ...
                tag('SCALEDPRESSUREpressdiff'), ...
                tag('SCALEDPRESSUREtemperature'), ...
                tag('SCALEDPRESSUREtimebootms'), ...
                tag('SYSSTATUSbatterycurrent'), ...
                tag('SYSSTATUSbatteryremaining'), ...
                tag('SYSSTATUSbatteryvoltage'), ...
                tag('SYSSTATUScurrentbattery'), ...
                tag('SYSSTATUSdropratecomm'), ...
                tag('SYSSTATUSerrorscomm'), ...
                tag('SYSSTATUSerrorscount1'), ...
                tag('SYSSTATUSerrorscount2'), ...
                tag('SYSSTATUSerrorscount3'), ...
                tag('SYSSTATUSerrorscount4'), ...
                tag('SYSSTATUSload'), ...
                tag('SYSSTATUSonboardcontrolsensorsenabled'), ...
                tag('SYSSTATUSonboardcontrolsensorshealth'), ...
                tag('SYSSTATUSonboardcontrolsensorspresent'), ...
                tag('SYSSTATUSsensorsenabled'), ...
                tag('SYSSTATUSsensorshealth'), ...
                tag('SYSSTATUSvoltagebattery'), ...
                tag('VFRHUDairspeed'), ...
                tag('VFRHUDalt'), ...
                tag('VFRHUDclimb'), ...
                tag('VFRHUDgroundspeed'), ...
                tag('VFRHUDheading'), ...
                tag('VFRHUDthrottle'), ...
                tag('port0RCCHANNELSSCALEDchan1scaled'), ...
                tag('port0RCCHANNELSSCALEDchan2scaled'), ...
                tag('port0RCCHANNELSSCALEDchan3scaled'), ...
                tag('port0RCCHANNELSSCALEDchan4scaled'), ...
                tag('port0RCCHANNELSSCALEDchan5scaled'), ...
                tag('port0RCCHANNELSSCALEDchan6scaled'), ...
                tag('port0RCCHANNELSSCALEDchan7scaled'), ...
                tag('port0RCCHANNELSSCALEDchan8scaled'), ...
                tag('port0RCCHANNELSSCALEDport'), ...
                tag('port0RCCHANNELSSCALEDrssi'), ...
                tag('port0RCCHANNELSSCALEDtimebootms'), ...
                tag('port1RCCHANNELSSCALEDchan1scaled'), ...
                tag('port1RCCHANNELSSCALEDchan2scaled'), ...
                tag('port1RCCHANNELSSCALEDchan3scaled'), ...
                tag('port1RCCHANNELSSCALEDchan4scaled'), ...
                tag('port1RCCHANNELSSCALEDchan5scaled'), ...
                tag('port1RCCHANNELSSCALEDchan6scaled'), ...
                tag('port1RCCHANNELSSCALEDchan7scaled'), ...
                tag('port1RCCHANNELSSCALEDchan8scaled'), ...
                tag('port1RCCHANNELSSCALEDport'), ...
                tag('port1RCCHANNELSSCALEDrssi'), ...
                tag('port1RCCHANNELSSCALEDtimebootms'), ...
                tag('stabAvgDel'), ...
                tag('stabDelayV'), ...
                tag('stabExTime'), ...
                tag('stabMaxDel'), ...
                tag('stabRTvio'), ...
                'airSpeed', ...
                'altitudeAMSL', ...
                'altitudeAMSLFT', ...
                'altitudeRelative', ...
                'altitudeWGS84', ...
                'groundSpeed', ...
                'latitude', ...
                'localX', ...
                'localY', ...
                'localZ', ...
                'longitude', ...
                'satelliteCount'
               };

% Reset indices to zero          
idx = zeros(1,numel(loggableVars));
indices = containers.Map(loggableVars, idx);

% Update indices -- Match present values with coresponding index to update
% it to value found in log file
for i = 1:size(loggedVars)
    varname = loggedVars(i);
    if isKey(indices,varname)
        indices(char(varname)) = i;
    end
end

% Define time vector
timekeeper = data(1:rows(data), indices('TIMESTAMPms'));

% ****************************** Step 2/2 ****************************** %
% Determine which variables to plot

% Generic plot -- Add the names of variables you would like to plot, 
% grouped by figure
% plotParams(tag('ATTITUDEpitch'),tag('ATTITUDEroll'),tag('ATTITUDEyaw'))
% plotParams(tag('GLOBALPOSITIONINTalt'),tag('GLOBALPOSITIONINTlat'),tag('GLOBALPOSITIONINTlon'))

% Pre-existing plots -- Feel free to implement your own and make them
% available just below this step

% plotAcc()
% plotHeading()
  
% ****************************** Step 2/2 ****************************** %

	% Generic plot function : Takes the name of parameters available in the
	% log and plots them together (ie on the same figure)
    function plotParams(varargin)
        % Data
        plotData = [];
       for i = 1:numel(varargin)
           if indices(varargin{i}) == 0
               error('Trying to plot a variable ( %s ) that does not appear in the log', varargin{i});
           end
           plotData = [plotData data(1:rows(data),indices(varargin{i}))];
       end
       
       % Plots
       colors = ['r', 'g', 'b', 'k', 'y'];
       
       legends = [];
       for i = 1:numel(varargin)
           legends = [legends, cellstr(varargin{i})];
       end
       
       figure
       hold on
       
       for i = 1:numel(varargin)
           plot(timekeeper, plotData(:,i),colors(i))
       end
       
       legend(legends)
       xlabel('Time (ms)')
       
       grid on
        
       hold off
       
    end

% ****************************** Plots ****************************** %
    % Custom plot functions -- You can implement your custom plot 
    % functions here.
% ****************************** Plots ****************************** %

    % Plots the acceleration in X,Y and Z
    function plotAcc()
        plotParams(tag('RAWIMUxacc'),tag('RAWIMUyacc'),tag('RAWIMUzacc'))
    end

    % Plots the heading from the attitude logs
    function plotHeading()
        % Data
        plotData = data(1:rows(data), indices(tag('ATTITUDEyaw'))) ./ (pi*180);
        
        % Plot
        figure
        plot(timekeeper, plotData, 'r')
        legend(tag('ATTITUDEyaw'))
        xlabel('Time (ms)')
        ylabel('Heading (rad)')
        grid on
    end


% Utilities

    % Adds the device ID to the parameter to conform to QGC logging
    % conventions
    function name = tag(param)
       name = strcat(id,param);
    end

    % Find number of columns in a given file
    function numCols = getNumCols(filename)
        delimiter = char(9); % '\t'
        fid = fopen(filename, 'rt');
        tLines = fgets(fid);
        numCols = numel(strfind(tLines,delimiter)) + 1;
    end

    function lastNaNIndex = findLastNaNIndex(text, numCols)
        lastNaNIndex=1;
        for i = 1:size(text{1})
            if strcmp(text{1}(i), 'NaN')
                lastNaNIndex = i;
            end
        end
        lastNaNIndex = floor(lastNaNIndex./numCols) * 2 + 1;
    end
    
    % Returns the number of rows in a matrix
    function rows = rows(x) 
        rows = size(x,1); 
    end

    % Returns the number of columns in a matrix
    function cols = cols(x) 
            cols = size(x,2);
    end
end
